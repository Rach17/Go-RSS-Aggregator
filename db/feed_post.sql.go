// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_post.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedPost = `-- name: CreateFeedPost :exec
insert into feed_post (feed_id, title, url, description, published_at, author)
values ($1, $2, $3, $4, $5, $6)
`

type CreateFeedPostParams struct {
	FeedID      uuid.UUID      `json:"feed_id"`
	Title       string         `json:"title"`
	Url         string         `json:"url"`
	Description sql.NullString `json:"description"`
	PublishedAt time.Time      `json:"published_at"`
	Author      sql.NullString `json:"author"`
}

// description: Create a new feed post
func (q *Queries) CreateFeedPost(ctx context.Context, arg CreateFeedPostParams) error {
	_, err := q.db.ExecContext(ctx, createFeedPost,
		arg.FeedID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.Author,
	)
	return err
}

const getFeedPosts = `-- name: GetFeedPosts :many
select feed_post.id, feed_post.created_at, feed_post.updated_at, feed_id, feed_post.title, feed_post.url, feed_post.description, published_at, author, feeds.id, feeds.created_at, feeds.updated_at, feeds.title, feeds.url, feeds.description, language, last_fetched_at from feed_post, feeds 
where feed_post.url = $1 and feed_post.feed_id = feed.id
`

type GetFeedPostsRow struct {
	ID            uuid.UUID      `json:"id"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	FeedID        uuid.UUID      `json:"feed_id"`
	Title         string         `json:"title"`
	Url           string         `json:"url"`
	Description   sql.NullString `json:"description"`
	PublishedAt   time.Time      `json:"published_at"`
	Author        sql.NullString `json:"author"`
	ID_2          uuid.UUID      `json:"id_2"`
	CreatedAt_2   time.Time      `json:"created_at_2"`
	UpdatedAt_2   sql.NullTime   `json:"updated_at_2"`
	Title_2       string         `json:"title_2"`
	Url_2         string         `json:"url_2"`
	Description_2 sql.NullString `json:"description_2"`
	Language      string         `json:"language"`
	LastFetchedAt sql.NullTime   `json:"last_fetched_at"`
}

func (q *Queries) GetFeedPosts(ctx context.Context, url string) ([]GetFeedPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedPosts, url)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedPostsRow
	for rows.Next() {
		var i GetFeedPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeedID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.Author,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Title_2,
			&i.Url_2,
			&i.Description_2,
			&i.Language,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
