// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (title, url, description, language)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, title, url, description, language, last_fetched_at
`

type CreateFeedParams struct {
	Title       string         `json:"title"`
	Url         string         `json:"url"`
	Description sql.NullString `json:"description"`
	Language    string         `json:"language"`
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Language,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.Language,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeedByID = `-- name: GetFeedByID :one
SELECT id, created_at, updated_at, title, url, description, language, last_fetched_at FROM feeds WHERE id = $1
`

func (q *Queries) GetFeedByID(ctx context.Context, id uuid.UUID) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByID, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.Language,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeedByURL = `-- name: GetFeedByURL :one
SELECT id, created_at, updated_at, title, url, description, language, last_fetched_at FROM feeds WHERE url = $1
`

func (q *Queries) GetFeedByURL(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByURL, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.Language,
		&i.LastFetchedAt,
	)
	return i, err
}

const updateFeedLastFetchedAt = `-- name: UpdateFeedLastFetchedAt :exec
UPDATE feeds
SET last_fetched_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateFeedLastFetchedAt(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateFeedLastFetchedAt, id)
	return err
}
