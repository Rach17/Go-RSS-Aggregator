// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_posts.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedPost = `-- name: CreateFeedPost :exec
insert into feed_posts (feed_id, title, url, description,author, published_at)
values ($1, $2, $3, $4, $5, $6)
`

type CreateFeedPostParams struct {
	FeedID      uuid.UUID      `json:"feed_id"`
	Title       string         `json:"title"`
	Url         string         `json:"url"`
	Description sql.NullString `json:"description"`
	Author      sql.NullString `json:"author"`
	PublishedAt time.Time      `json:"published_at"`
}

// description: Create a new feed post
func (q *Queries) CreateFeedPost(ctx context.Context, arg CreateFeedPostParams) error {
	_, err := q.db.ExecContext(ctx, createFeedPost,
		arg.FeedID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.Author,
		arg.PublishedAt,
	)
	return err
}

const getFeedPosts = `-- name: GetFeedPosts :many
select feeds.id, feeds.created_at, feeds.updated_at, feeds.title, feeds.url, feeds.description, feeds.language, feeds.last_fetched_at, feed_posts.id, feed_posts.created_at, feed_posts.updated_at, feed_posts.feed_id, feed_posts.title, feed_posts.url, feed_posts.description, feed_posts.published_at, feed_posts.author from feed_posts, feeds
where feed_posts.url = $1 and feed_posts.feed_id = feeds.id
`

type GetFeedPostsRow struct {
	Feed     Feed     `json:"feed"`
	FeedPost FeedPost `json:"feed_post"`
}

func (q *Queries) GetFeedPosts(ctx context.Context, url string) ([]GetFeedPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedPosts, url)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedPostsRow
	for rows.Next() {
		var i GetFeedPostsRow
		if err := rows.Scan(
			&i.Feed.ID,
			&i.Feed.CreatedAt,
			&i.Feed.UpdatedAt,
			&i.Feed.Title,
			&i.Feed.Url,
			&i.Feed.Description,
			&i.Feed.Language,
			&i.Feed.LastFetchedAt,
			&i.FeedPost.ID,
			&i.FeedPost.CreatedAt,
			&i.FeedPost.UpdatedAt,
			&i.FeedPost.FeedID,
			&i.FeedPost.Title,
			&i.FeedPost.Url,
			&i.FeedPost.Description,
			&i.FeedPost.PublishedAt,
			&i.FeedPost.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
